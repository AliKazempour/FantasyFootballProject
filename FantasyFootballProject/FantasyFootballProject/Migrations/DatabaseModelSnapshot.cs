// <auto-generated />
using System;
using FantasyFootballProject.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FantasyFootballProject.Migrations
{
    [DbContext(typeof(Database))]
    partial class DatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0-preview.5.23280.1");

            modelBuilder.Entity("FantasyFootballProject.DataBase.Player", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("element_type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("event_points")
                        .HasColumnType("INTEGER");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("now_cost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("second_name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("team")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("teamCode")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("teamCode1")
                        .HasColumnType("INTEGER");

                    b.Property<double>("total_points")
                        .HasColumnType("REAL");

                    b.HasKey("id");

                    b.HasIndex("teamCode");

                    b.HasIndex("teamCode1");

                    b.ToTable("players");
                });

            modelBuilder.Entity("FantasyFootballProject.DataBase.Team", b =>
                {
                    b.Property<int>("teamCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("teamCode");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("FantasyFootballProject.DataBase.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("money")
                        .HasColumnType("INTEGER");

                    b.Property<double>("score")
                        .HasColumnType("REAL");

                    b.Property<int>("teamCode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("verified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Username");

                    b.HasIndex("teamCode");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FantasyFootballProject.DataBase.tempUser", b =>
                {
                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("time")
                        .HasColumnType("TEXT");

                    b.HasKey("username");

                    b.ToTable("temp_users");
                });

            modelBuilder.Entity("FantasyFootballProject.DataBase.Player", b =>
                {
                    b.HasOne("FantasyFootballProject.DataBase.Team", null)
                        .WithMany("mainTeam")
                        .HasForeignKey("teamCode");

                    b.HasOne("FantasyFootballProject.DataBase.Team", null)
                        .WithMany("reserveTeam")
                        .HasForeignKey("teamCode1");
                });

            modelBuilder.Entity("FantasyFootballProject.DataBase.User", b =>
                {
                    b.HasOne("FantasyFootballProject.DataBase.Team", "team")
                        .WithMany()
                        .HasForeignKey("teamCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("team");
                });

            modelBuilder.Entity("FantasyFootballProject.DataBase.Team", b =>
                {
                    b.Navigation("mainTeam");

                    b.Navigation("reserveTeam");
                });
#pragma warning restore 612, 618
        }
    }
}
